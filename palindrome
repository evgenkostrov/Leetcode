

class Solution {
    fun isPalindrome(x: Int): Boolean {
val s = x.toString
        val n = s.size()
for (int i=0; i<n/2; i++) {
    if (s.[i] != s.[n-i-1]) return false
        return true
    }
}



Idea
We're going to convert our int to String and then compare the first element to the very last element, second element to second last element and so on [elements at the same distance from the beginning and from the end].. If they don't match we return a False

JAVA Code
class Solution {
    public boolean isPalindrome(int x) {
        String s = String.valueOf(x); // Convert to String
        int n = s.length(); // Store the String length to int n

        for (int i=0; i<n/2; i++) {
            // We check whether the elements at the same distance from
            // beginning and from ending are same, if not we return false
            if (s.charAt(i) != s.charAt(n-i-1)) return false;
        }

        // if no flaws are found we return true
        return true;
    }
}
There is another approach to this problem:

We can store one half of the integer in a another variable in reversed order. Then we compare it to the other unaltered half of the number and see if they are equal or not [which should be in case of palindromes]

class Solution {
    public boolean isPalindrome(int x) {
        if (x<0 || (x!=0 && x%10==0)) return false;
        int rev = 0;
        while (x>rev){
            rev = rev*10 + x%10;
            x = x/10;
        }
        return (x==rev || x==rev/10);
    }
}
